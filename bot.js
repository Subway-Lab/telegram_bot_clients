require('dotenv').config();
const Redis = require('ioredis');                              // ‚Üê –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
const redis = new Redis(process.env.REDIS_URL);                // ‚Üê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
redis.on('connect', () => console.log('‚úÖ Redis (bot.js) –ø–æ–¥–∫–ª—é—á—ë–Ω'));
redis.on('error', err => console.error('‚ùå Redis (bot.js) –æ—à–∏–±–∫–∞:', err));

const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const mime = require('mime-types');
const mongoose = require('mongoose');
const connectDB = require('./db');
const Request = require('./models/Request');
const uploadBuffer = require('./services/uploadPhoto');


const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB();

// ========================
// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
// ========================
bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É".');
});

bot.command('new', (ctx) => {
  ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.');
});

// ========================
// –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ========================
const getFilePath = async (fileId) => {
  try {
    const res = await axios.get(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`);
    return res.data.result.file_path;
  } catch (err) {
    console.error('[getFilePath] –û—à–∏–±–∫–∞:', err.message);
    throw err;
  }
};

const downloadPhoto = async (filePath) => {
  try {
    const url = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${filePath}`;
    console.log('[downloadPhoto] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ URL:', url);
    const res = await axios.get(url, { responseType: 'arraybuffer' });
    return {
      buffer: Buffer.from(res.data),
      contentType: mime.lookup(filePath) || 'application/octet-stream',
    };
  } catch (err) {
    console.error('[downloadPhoto] –û—à–∏–±–∫–∞:', err.message);
    throw err;
  }
};

// ========================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
// ========================
const handleRequest = async (ctx, content) => {
  const { id, username, first_name, last_name, language_code, is_bot } = ctx.from;
  const location = ctx.message.location;

  try {
    const previousRequests = await Request.find({ chatId: ctx.chat.id, isCompleted: false });

    await Promise.all(previousRequests.map(async (req) => {
      try {
        await ctx.deleteMessage(req.messageId);
        console.log(`[CLEANUP] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${req.messageId}`);
      } catch (e) {
        console.log('[CLEANUP] –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ:', e.message);
      }
    }));

    const requestData = {
      userId: id.toString(),
      username: username || 'unknown',
      firstName: first_name || '',
      lastName: last_name || '',
      languageCode: language_code || '',
      isBot: is_bot || false,
      ...(location ? { location: { type: 'Point', coordinates: [location.longitude, location.latitude] } } : {}),
      chatId: ctx.chat.id,
      messageId: null,
      ...content,
      isCompleted: false,
      createdAt: new Date(),
    };

    const request = new Request(requestData);
    const savedRequest = await request.save();

    const msg = await ctx.reply(
      '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ:',
      Markup.inlineKeyboard([Markup.button.callback('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', 'SUBMIT_REQUEST')])
    );

    await Request.updateOne({ _id: savedRequest._id }, { messageId: msg.message_id });
    console.log(`[SAVED] –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${savedRequest._id}`);

  } catch (error) {
    console.error('[handleRequest] –û—à–∏–±–∫–∞:', error.message);
    await ctx.reply('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
};

// ========================
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
// ========================
bot.action('SUBMIT_REQUEST', async (ctx) => {
  try {
    // 1) –û—Ç–º–µ—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    const result = await Request.updateMany(
      { chatId: ctx.chat.id, isCompleted: false },
      { isCompleted: true }
    );
    console.log(`[SUBMIT] –ü–æ–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏: ${result.modifiedCount}`);

    // 2) –î–æ—Å—Ç–∞—ë–º –≤—Å–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const completed = await Request.find(
      { chatId: ctx.chat.id, isCompleted: true }
    ).lean();

    // 3) –ü—É–±–ª–∏–∫—É–µ–º –ø–æ–ª–Ω—ã–π JSON –≤ Redis
    const payload = JSON.stringify(completed);
    await redis.publish('new_request', payload);
    console.log('[REDIS ‚ñ∂] –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω payload –≤ –∫–∞–Ω–∞–ª new_request:', payload);

    // 4) –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
    await Promise.all(completed.map(async (req) => {
      try {
        await ctx.deleteMessage(req.messageId);
        console.log(`[SUBMIT] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${req.messageId}`);
      } catch (e) {
        console.log('[SUBMIT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
      }
    }));

    // 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.answerCbQuery(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${result.modifiedCount}`);
  } catch (error) {
    console.error('[SUBMIT] –û—à–∏–±–∫–∞:', error);
    ctx.answerCbQuery('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
  }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
  const photoArray = ctx.message.photo;
  const fileId = photoArray[photoArray.length - 1].file_id;

  try {
    const filePath = await getFilePath(fileId);
    const { buffer, contentType } = await downloadPhoto(filePath);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤ DigitalOcean Spaces
    const key = `${ctx.chat.id}/${Date.now()}.jpg`;
    console.log('[photo] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Spaces —Å –∫–ª—é—á–æ–º:', key);
    const imageUrl = await uploadBuffer(buffer, key);
    console.log('[photo] –§–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ URL:', imageUrl);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB –≤–º–µ—Å—Ç–µ —Å photoBuffer –∏ URL
    await handleRequest(ctx, { photoBuffer: buffer, photoContentType: contentType, imageUrl });

  } catch (error) {
    console.error('[photo] –û—à–∏–±–∫–∞:', error.message);
    ctx.reply('üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
bot.on('text', async (ctx) => {
  await handleRequest(ctx, { description: ctx.message.text });
});

// ========================
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
// ========================
bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')).catch((err) => console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));


// ========================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Main Menu
// ========================
bot.telegram.setMyCommands([
  { command: 'support', description: '–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞' },
  { command: 'how', description: '–í—ã–∑–≤–∞—Ç—å —ç–≤–∞–∫—É–∞—Ç–æ—Ä' },
  { command: 'stub3', description: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –±–æ—Ç?' },
  { command: 'stub4', description: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É' },
]);

bot.telegram.setChatMenuButton({
  menu_button: {
    type: 'commands'
  }
});

