require('dotenv').config();
const { OpenAI } = require('openai');
const Redis = require('ioredis');
const mongoose = require('mongoose');
const Request = require('../../models/Request'); // –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,  // –ö–ª—é—á API
});

const MONGO_URI = process.env.MONGO_URI;
const REDIS_URL = process.env.REDIS_URL;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(MONGO_URI)
  .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
const redis = new Redis(REDIS_URL);
redis.on('error', (err) => console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', err));
redis.on('connect', () => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis'));

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª Redis
redis.subscribe('new_request', (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Redis:', err);
  } else {
    console.log('üì° –°–ª—É—à–∞–µ–º Redis: –∫–∞–Ω–∞–ª new_request');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
redis.on('message', async (channel, message) => {
  console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channel}: ${message}`);
  console.log('üß† –í–æ—à–ª–∏ –≤ message handler');

  const chatId = message.trim();
  if (!chatId) {
    console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π chatId. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.');
    return;
  }

  try {
    // –ù–∞–π–¥—ë–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å —ç—Ç–∏–º chatId
    const requests = await Request.find({ chatId }).sort({ createdAt: 1 });

    if (!requests.length) {
      console.log(`‚ö†Ô∏è –ó–∞—è–≤–∫–∏ —Å chatId "${chatId}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
      return;
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${requests.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chatId ${chatId}`);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ description –≤ –æ–¥–Ω–æ –ø–æ–ª–µ
    const fullDescription = requests
      .map((req, index) => `- ${req.description || `[–ø—É—Å—Ç–æ ${index + 1}]`}`)
      .join('\n');

    const finalMessage = `üìù –û–±—â–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è GPT:\n${fullDescription}`;
    console.log(finalMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: finalMessage }],
    });

    console.log('–û—Ç–≤–µ—Ç –æ—Ç GPT:', response.choices[0].message.content);
    // TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ Telegram

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
  }
});
