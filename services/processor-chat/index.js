// index.js
require('dotenv').config();

const { S3Client, ListObjectsV2Command } = require('@aws-sdk/client-s3');
const Redis = require('ioredis');
const mongoose = require('mongoose');
const Request = require('../../models/Request');

const { analyzeRequests } = require('./AIChat');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env
const MONGO_URI = process.env.MONGO_URI;
const REDIS_URL = process.env.REDIS_URL;
const SPACES_REGION = process.env.SPACES_REGION;
const SPACES_ENDPOINT = process.env.SPACES_ENDPOINT;
const SPACES_KEY = process.env.SPACES_KEY;
const SPACES_SECRET = process.env.SPACES_SECRET;
const SPACES_BUCKET = process.env.SPACES_BUCKET;

// NODE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(MONGO_URI)
  .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// NODE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
const redis = new Redis(REDIS_URL);
redis.on('error', err => console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', err));
redis.on('connect', () => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis'));

// NODE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DigitalOcean Spaces
const s3 = new S3Client({
  region: SPACES_REGION,
  endpoint: SPACES_ENDPOINT,
  credentials: {
    accessKeyId: SPACES_KEY,
    secretAccessKey: SPACES_SECRET,
  },
});

(async () => {
  try {
    const data = await s3.send(new ListObjectsV2Command({
      Bucket: SPACES_BUCKET,
      MaxKeys: 5,
    }));

    console.log('üì∏ –§–∞–π–ª—ã –≤ Spaces:');
    if (data.Contents) {
      data.Contents.forEach(obj => console.log(' -', obj.Key));
    } else {
      console.log('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Spaces');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ DigitalOcean Spaces:', err.message);
  }
})();

// NODE: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª new_request
redis.subscribe('new_request', err => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Redis:', err);
  } else {
    console.log('üì° –°–ª—É—à–∞–µ–º Redis: –∫–∞–Ω–∞–ª new_request');
  }
});

redis.on('message', async (channel, message) => {
  let requests;
  try {
    requests = JSON.parse(message);
  } catch (e) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ Redis:', e.message);
    return;
  }

  if (!Array.isArray(requests) || !requests.length) {
    console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.');
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ chatId —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
  const grouped = {};
  requests.forEach(req => {
    if (!req.isCompleted) return;
    if (!grouped[req.chatId]) grouped[req.chatId] = [];
    grouped[req.chatId].push(req);
  });

  for (const chatId in grouped) {
    const group = grouped[chatId];
    const messageParts = [];
    const imageUrls = [];
    let meta = {};

    group.forEach(req => {
      if (req.description) messageParts.push(`–¢–µ–∫—Å—Ç: ${req.description}`);
      if (req.imageUrl) {
        messageParts.push(`–§–æ—Ç–æ: ${req.imageUrl}`);
        imageUrls.push(req.imageUrl);
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏ (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
      if (!meta.userId) {
        meta = {
          chatId: req.chatId,
          userId: req.userId,
          username: req.username,
          firstName: req.firstName,
          lastName: req.lastName,
          languageCode: req.languageCode,
        };
      }
    });

    console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è GPT (chatId ${chatId}):\n${messageParts.join('\n')}`);
    console.log(`üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageUrls.length}`);

    try {
      await analyzeRequests(messageParts, imageUrls, meta);
    } catch (err) {
      // –£–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤–Ω—É—Ç—Ä–∏ analyzeRequests
    }
  }
});
