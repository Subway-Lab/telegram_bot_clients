require('dotenv').config();
const { OpenAI } = require('openai');
const Redis = require('ioredis');
const mongoose = require('mongoose');
const Request = require('../../models/Request'); // –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å

const { S3Client, ListObjectsV2Command } = require('@aws-sdk/client-s3');

const s3 = new S3Client({
  region: process.env.SPACES_REGION,
  endpoint: process.env.SPACES_ENDPOINT,
  credentials: {
    accessKeyId: process.env.SPACES_KEY,
    secretAccessKey: process.env.SPACES_SECRET,
  },
});


const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,  // –ö–ª—é—á API
});

const MONGO_URI = process.env.MONGO_URI;
const REDIS_URL = process.env.REDIS_URL;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(MONGO_URI)
  .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
const redis = new Redis(REDIS_URL);
redis.on('error', (err) => console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', err));
redis.on('connect', () => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis'));

(async () => {
  try {
    const data = await s3.send(new ListObjectsV2Command({
      Bucket: process.env.SPACES_BUCKET,
      MaxKeys: 5, // –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å
    }));

    console.log('üì∏ –§–∞–π–ª—ã –≤ Spaces:');
    if (data.Contents) {
      data.Contents.forEach(obj => console.log(' -', obj.Key));
    } else {
      console.log('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Spaces');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ DigitalOcean Spaces:', err.message);
  }
})();


// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª Redis
redis.subscribe('new_request', (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Redis:', err);
  } else {
    console.log('üì° –°–ª—É—à–∞–µ–º Redis: –∫–∞–Ω–∞–ª new_request');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
redis.on('message', async (channel, message) => {
  console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channel}: ${message}`);
  console.log('üß† –í–æ—à–ª–∏ –≤ message handler');

  const chatId = message.trim();
  if (!chatId) {
    console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π chatId. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.');
    return;
  }

  try {
    // –ù–∞–π–¥—ë–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å —ç—Ç–∏–º chatId
    const requests = await Request.find({ chatId }).sort({ createdAt: 1 });

    if (!requests.length) {
      console.log(`‚ö†Ô∏è –ó–∞—è–≤–∫–∏ —Å chatId "${chatId}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
      return;
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${requests.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chatId ${chatId}`);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ description –≤ –æ–¥–Ω–æ –ø–æ–ª–µ
    const fullDescription = requests
      .map((req, index) => `- ${req.description || `[–ø—É—Å—Ç–æ ${index + 1}]`}`)
      .join('\n');

    const finalMessage = `üìù –û–±—â–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è GPT:\n${fullDescription}`;
    console.log(finalMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∞–≤—Ç–æ –¥–ª—è –°–¢–û. 
          - –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π.
          - –û–ø–∏—à–∏ –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ç–æ.
          - –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω—É—Ç—Ä–∏ –¥–≤–µ—Ä–µ–π, –≤ —Ä–∞–º–µ –∏ —Ç.–¥.).
          - –î–∞–π –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç.`,
        },
        {
          role: 'user',
          content: `–í–æ—Ç —Å–≤–æ–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏):\n${finalMessage}\n\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –µ–¥–∏–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –°–¢–û –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É.`,
        }
      ],
    });
    

    console.log('–û—Ç–≤–µ—Ç –æ—Ç GPT:', response.choices[0].message.content);
    // TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ Telegram

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
  }
});
