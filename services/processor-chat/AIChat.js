// AIChat.js
const { OpenAI } = require('openai');
const Request = require('../../models/Request'); 

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

 async function analyzeRequests(messageParts, imageUrls, meta = {}) {
  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: `–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∞–≤—Ç–æ –¥–ª—è –°–¢–û. 
            - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            - –í–ê–ñ–ù–û!: –ü–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –¥–µ—Ç–∞–ª—è–º –Ω–∞ —Ñ–æ—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø—Ä–µ–¥–ø–æ–ª–æ–≥–∞–µ–º—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
            - –í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
            - –û–ø–∏—à–∏ –≤–∏–¥–∏–º—ã–µ –Ω–∞ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
            - –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç`,
        },
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: `–î–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n${messageParts.join('\n')}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:`,
            },
            ...imageUrls.map(url => ({
              type: 'image_url',
              image_url: { url },
            })),
          ],
        },
      ],
    });

    const answer = response.choices[0].message.content;
    console.log('–û—Ç–≤–µ—Ç –æ—Ç GPT:', answer);
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å', imageUrls.length, '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ MongoDB
    try {
      const newRequest = new Request({
        type: 'Post',
        description: answer, // NODE: –û—Ç–≤–µ—Ç ChatGPT
        imageUrl: imageUrls[0], // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ –º–æ–∂–Ω–æ –º–∞—Å—Å–∏–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É)
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:
        userId: 'chatgpt-assistant', // –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
        username: 'chatgpt-assistant',
        chatId: meta.chatId || 0,
        firstName: meta.firstName || '',
        lastName: meta.lastName || '',
        languageCode: meta.languageCode || '',
        isBot: true,
        isCompleted: true,
        // –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      });
      
      await newRequest.save();
      console.log('üìÅ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MongoDB –∫–∞–∫ Post');
    } catch (dbError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB:', dbError);
    }

  } catch (error) {  // <-- –≠—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
    throw error;
  }
}

module.exports = { analyzeRequests };